#!/usr/bin/env php
<?php
//----------------------------------------------------------------------------
//
//----------------------------------------------------------------------------

class Db_Table_Parser {
    private $_prefix = 'Application_Model';
    public function __construct() {
    }
    public function parse($table, $schema) {
        $adapter = Zend_Db_Table::getDefaultAdapter();
        $info['primary'] = array();
        $info['indexes'] = array();
        $info['parents'] = array();
        $info['dependants'] = array();
        $info['referenceMap'] = array();
        $info['dependentTables'] = array();
        $info['metadata'] = $adapter->describeTable($table, $schema);
        // find primary keys
        $indexes = $adapter->fetchAll(sprintf('SHOW INDEXES FROM `%s` WHERE Key_name = "PRIMARY"', $table));
        foreach ($indexes as $index) {
            $info['primary'][] = $index['Column_name'];
        }
        // find indexes
        $indexes = $adapter->fetchAll(sprintf('SHOW INDEXES FROM `%s`', $table));
        foreach ($indexes as $index) {
            $info['indexes'][$index['Column_name']] = $index['Column_name'];
        }
        // get outgoing references
        $references = $adapter->fetchAll(sprintf('SELECT * FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE CONSTRAINT_SCHEMA = "%s" AND TABLE_NAME = "%s" AND REFERENCED_TABLE_NAME IS NOT NULL', $schema, $table));
        foreach ($references as $reference) {
            $info['referenceMap'][$reference['CONSTRAINT_NAME']] = array('columns' => $reference['COLUMN_NAME'], 'refTableClass' => $this->formatModelClassName($reference['REFERENCED_TABLE_NAME']), 'refColumns' => $reference['REFERENCED_COLUMN_NAME']);
            $info['parents'][$reference['REFERENCED_TABLE_NAME']] = $reference['CONSTRAINT_NAME'];
        }
        unset($references);
        // get incoming references
        $references = $adapter->fetchAll(sprintf('SELECT * FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE CONSTRAINT_SCHEMA = "%s" AND REFERENCED_TABLE_NAME = "%s"', $schema, $table));
        foreach ($references as $reference) {
            $info['dependentTables'][] = $this->formatModelClassName($reference['TABLE_NAME']);
        }
        return $info;
    }
    public function setPrefix($string) {
        $this->_prefix = $string;
    }
    public function getPrefix() {
        return $this->_prefix;
    }
    public function formatTableName($name) {
        return str_replace('_', '', mb_convert_case($name, MB_CASE_TITLE));
    }
    public function formatRowClassName($name) {
        $prefix = $this->getPrefix();
        if (empty($prefix)) {
            return sprintf('DbTable_Row_%s', $this->formatTableName($name));
        } else {
            return sprintf('%s_DbTable_Row_%s', $prefix, $this->formatTableName($name));
        }
    }
    public function formatRowsetClassName($name) {
        $prefix = $this->getPrefix();
        if (empty($prefix)) {
            return sprintf('DbTable_Rowset_%s', $this->formatTableName($name));
        } else {
            return sprintf('%s_DbTable_Rowset_%s', $prefix, $this->formatTableName($name));
        }
    }
    public function formatModelClassName($name) {
        $prefix = $this->getPrefix();
        if (empty($prefix)) {
            return sprintf('%s', $this->formatTableName($name));
        } else {
            return sprintf('%s_%s', $prefix, $this->formatTableName($name));
        }
    }
    public function formatDbTableClassName($name) {
        $prefix = $this->getPrefix();
        if (empty($prefix)) {
            return sprintf('DbTable_%s', $this->formatTableName($name));
        } else {
            return sprintf('%s_DbTable_%s', $prefix, $this->formatTableName($name));
        }
    }

    public function formatFormClassName($name) {
        $prefix = $this->getPrefix();
        $fname = ucfirst(strtolower($this->formatTableName($name)));
        if (empty($prefix)) {
            return sprintf('%s', $fname );
        } else {
            return sprintf('%s', $prefix, $fname );
        }
    }

    public static function formatMethodName($string) {
        return str_replace('_', '', mb_convert_case($string, MB_CASE_TITLE));
    }
}
//------------------------------------------------------------------------------
define('DS', DIRECTORY_SEPARATOR, false);
class CodeDumper {

    //
    static $_dir_ensurede = false;
    public static function ensureDirectories($opts) {
        if( empty(self::$_dir_ensurede) ) {
            // try to make the directory
            if (!is_dir($opts->output)) {
                mkdir($opts->output);
            }
            if (!is_dir($opts->output.DS.'DbTable')) {
                mkdir($opts->output.DS.'DbTable');
            }
            if (!is_dir($opts->output.DS.'DbTable'.DS.'Row')) {
                mkdir($opts->output.DS.'DbTable'.DS.'Row');
            }
            if (!is_dir($opts->output.DS.'DbTable'.DS.'Rowset')) {
                mkdir($opts->output.DS.'DbTable'.DS.'Rowset');
            }
            if (!is_dir($opts->output.DS.'forms')) {
                mkdir($opts->output.DS.'forms');
            }
            if (!is_dir($opts->output.DS.'controllers')) {
                mkdir($opts->output.DS.'controllers');
            }
        }
        return true;
    }

    //
    public static function getMethods($info, $parser) {
        // generate methods
        $a_methods[] = new Zend_CodeGenerator_Php_Method(array('name' => 'findAll', 'body' => 'return $this->fetchAll($where, $order, $count, $offset);', 'parameters' => array(array('name' => 'where', 'defaultValue' => null), array('name' => 'order', 'defaultValue' => null), array('name' => 'count', 'defaultValue' => null), array('name' => 'offset', 'defaultValue' => null)),));
        $a_methods[] = new Zend_CodeGenerator_Php_Method(array('name' => 'findRow', 'body' => 'return $this->find($key)->current();', 'parameters' => array(array('name' => 'key'),),));
        foreach ($info['indexes'] as $key) {
            $a_methods[] = new Zend_CodeGenerator_Php_Method(array('name' => sprintf('findBy%s', $parser->formatMethodName($key)), 'body' => sprintf('return $this->fetchAll($this->getAdapter()->quoteInto(\'%s = ?\', $value), $order, $count, $offset);', $key), 'parameters' => array(array('name' => 'value'), array('name' => 'order', 'defaultValue' => null), array('name' => 'count', 'defaultValue' => null), array('name' => 'offset', 'defaultValue' => null)),));
            $a_methods[] = new Zend_CodeGenerator_Php_Method(array('name' => sprintf('countBy%s', $parser->formatMethodName($key)), 'body' => sprintf('return $this->fetchRow($this->select(Zend_Db_Table::SELECT_WITH_FROM_PART)->setIntegrityCheck(false)->columns(array(\'%s\', \'num\'=> \'COUNT(*)\'))->where(\'%s = ?\', $value))->num;', implode("','", $info['primary']), $key), 'parameters' => array(array('name' => 'value'),),));
        }
        foreach ($info['parents'] as $table => $key) {
            $a_methods[] = new Zend_CodeGenerator_Php_Method(array('name' => sprintf('find%s', $parser->formatMethodName($table)), 'body' => sprintf('return $this->findParentRow(new %s(), null, $select);', $parser->formatDbTableClassName($table)), 'parameters' => array(array('name' => 'select', 'defaultValue' => null),),));
        }
        foreach ($info['dependants'] as $table) {
            $a_methods[] = new Zend_CodeGenerator_Php_Method(array('name' => sprintf('find%s', $parser->formatMethodName($table)), 'body' => sprintf('return $this->findDependentRowset(new %s(), null, $select);', $parser->formatDbTableClassName($table)), 'parameters' => array(array('name' => 'select', 'defaultValue' => null),),));
        }
        return $a_methods;
    }

    public static function processTable($name, stdClass $opts, Db_Table_Parser $parser) {

        self::ensureDirectories($opts);

        $str_autogenerated_notice = self::getNotice();

        if ( !in_array($name, $opts->ignore) and ($opts->limit == '*' or in_array($name, $opts->limit)) ) {
            printf('Processing "%s"'."\n", $name);
            $info = $parser->parse($name, $opts->database);

            $info['methods'] = self::getMethods($info, $parser);


            $row = new Zend_CodeGenerator_Php_File(array('classes' => array(new Zend_CodeGenerator_Php_Class(array('name' => $parser->formatRowClassName($name), 'extendedClass' => $opts->rowclass)))));
            $rowset = new Zend_CodeGenerator_Php_File(array('classes' => array(new Zend_CodeGenerator_Php_Class(array('name' => $parser->formatRowSetClassName($name), 'extendedClass' => $opts->rowsetclass)))));
            $model = new Zend_CodeGenerator_Php_File(array('classes' => array(new Zend_CodeGenerator_Php_Class(array('name' => $parser->formatModelClassName($name), 'extendedClass' => $parser->formatDbTableClassName($name))))));
            $dbtable = new Zend_CodeGenerator_Php_File(
                array('classes' => array(new Zend_CodeGenerator_Php_Class(
                    array('name' => $parser->formatDbTableClassName($name),
                        'methods' => $info['methods'],
                        'properties' => array(
                            array('name' => '_name', 'visibility' => 'protected', 'defaultValue' => $name),
                            array('name' => '_primary', 'visibility' => 'protected', 'defaultValue' => array_values($info['primary'])),
                            array('name' => '_metadata', 'visibility' => 'protected', 'defaultValue' => $info['metadata']),
                            array('name' => '_cols', 'visibility' => 'protected', 'defaultValue' => array_keys($info['metadata'])),

                            array('name' => '_rowClass'    , 'visibility' => 'protected', 'defaultValue' => $parser->formatRowClassName($name)       ),
                            array('name' => '_rowsetClass' , 'visibility' => 'protected', 'defaultValue' => $parser->formatRowSetClassName($name)    ),


                            ['name' => '_referenceMap', 'visibility' => 'protected', 'defaultValue' => $info['referenceMap'] ],
                            ['name' => '_dependentTables', 'visibility' => 'protected', 'defaultValue' => $info['dependentTables'] ],
                        ),
                        'extendedClass' => 'Zend_Db_Table_Abstract'
                    )
                    )
                )
                )
            );



            $class_def = [
                'name' => "Application_Form_$name",
                'methods' => [
                    new Zend_CodeGenerator_Php_Method(
                        array('name' => 'init',
                            'body' => '/*code here*/'
                            )
                    )
                ],
                'properties' => [
                    ['name' => 'table_name', 'visibility' => 'protected', 'defaultValue' => $name],
                    ['name' => '_metadata', 'visibility' => 'protected', 'defaultValue' => $info['metadata'] ],
                    ['name' => '_referenceMap', 'visibility' => 'protected', 'defaultValue' => $info['referenceMap'] ],
                    ['name' => '_dependentTables', 'visibility' => 'protected', 'defaultValue' => $info['dependentTables'] ],
                ],
                'extendedClass' => 'Zend_Form'
            ];
            $form = new Zend_CodeGenerator_Php_File([
                'classes' => [ new Zend_CodeGenerator_Php_Class($class_def ) ]
            ] );


            $crud_class_def = [
                'name' => "{$name}Controller",
                'methods' => [
                    new Zend_CodeGenerator_Php_Method(
                        array('name' => 'init',
                            'body' => '/*code here*/'
                            )
                    ),
                    new Zend_CodeGenerator_Php_Method(
                        array('name' => 'indexAction', 'body' => '/*code here*/' )
                    ),
                    new Zend_CodeGenerator_Php_Method(
                        array('name' => 'newAction', 'body' => '/*code here*/' )
                    ),
                    new Zend_CodeGenerator_Php_Method(
                        array('name' => 'editAction', 'body' => '/*code here*/' )
                    ),
                    new Zend_CodeGenerator_Php_Method(
                        array('name' => 'deleteAction', 'body' => '/*code here*/' )
                    )
                ],
                'properties' => [
                    ['name' => 'table_name', 'visibility' => 'protected', 'defaultValue' => $name],
                    //['name' => '_metadata', 'visibility' => 'protected', 'defaultValue' => $info['metadata'] ],
                    //['name' => '_referenceMap', 'visibility' => 'protected', 'defaultValue' => $info['referenceMap'] ],
                    //['name' => '_dependentTables', 'visibility' => 'protected', 'defaultValue' => $info['dependentTables'] ],
                ],
                'extendedClass' => 'Zend_Form'
            ];
            $crud_controller = new Zend_CodeGenerator_Php_File([
                'classes' => [ new Zend_CodeGenerator_Php_Class($crud_class_def ) ]
            ] );




            $file_name = $parser->formatTableName($name);
            $model_file_name = $opts->output.DS.$file_name.'.php';
            if (is_file($model_file_name) && !$opts->overwrite) {
                printf('File exists %s'."\n", $model_file_name);
            } else {
                $code = $str_autogenerated_notice .self::cleanOut( $model->generate());
                file_put_contents($model_file_name, $code);
            }
            // always create dbtable files
            $file_path = $opts->output.DS.'DbTable'.DS.$file_name.'.php';
            $code = $str_autogenerated_notice .self::cleanOut( $dbtable->generate());
            file_put_contents( $file_path,$code );

            $row_file_name = $opts->output.DS.'DbTable'.DS.'Row'.DS.$file_name.'.php';
            if (is_file($row_file_name) && !$opts->overwrite) {
                printf('File exists %s'."\n", $row_file_name);
            } else {
                $code = $str_autogenerated_notice .self::cleanOut( $row->generate());
                file_put_contents($row_file_name, $code);
            }
            $rowset_file_name = $opts->output.DS.'DbTable'.DS.'Rowset'.DS.$file_name.'.php';
            if (is_file($rowset_file_name) && !$opts->overwrite) {
                printf('File exists %s'."\n", $rowset_file_name);
            } else {
                $code = $str_autogenerated_notice .self::cleanOut($rowset->generate());
                file_put_contents($rowset_file_name, $code );
            }

            $form_file_name = $opts->output.DS.'forms'.DS.$file_name.'.php';
            if (is_file($form_file_name) && !$opts->overwrite) {
                printf('File exists %s'."\n", $form_file_name);
            } else {
                $code = $str_autogenerated_notice .self::cleanOut($form->generate());
                file_put_contents($form_file_name, $code );
            }


            $controller_file_name = $opts->output.DS.'controllers'.DS.ucfirst($file_name).'Controller.php';
            if (is_file($controller_file_name) && !$opts->overwrite) {
                printf('File exists %s'."\n", $controller_file_name);
            } else {
                $code = $str_autogenerated_notice .self::cleanOut($crud_controller->generate());
                file_put_contents($controller_file_name, $code );
            }

        }
    }
    // toglie il doppio <?php
    public static function cleanOut($s) {
        $s = str_replace('//<?php', '//', $s);
        $s = str_replace('<?php', '', $s);
        return $s;
    }
    public static function getNotice() {
        global $argv;
        $str_autogenerated_notice = '';
        $str_autogenerated_notice .= "<?php\n";
        $str_autogenerated_notice .= "//                             \n";
        $str_autogenerated_notice .= "//  file generato da {$argv[0]}\n";
        $str_autogenerated_notice .= "//\n";
        return $str_autogenerated_notice;
    }
}
//----------------------------------------------------------------------------
//  config functions
//----------------------------------------------------------------------------
function get_options( $host, $database, $username, $password, $output_dir ) {
    $opts = new stdClass();
    $opts->host     = $host    ;
    $opts->database = $database;
    $opts->username = $username;
    $opts->password = $password;
    $opts->output   = $output_dir;
    echo "output directory is:".$opts->output."\n";
    if (isset($opts->help) or !isset($opts->host, $opts->database, $opts->username, $opts->output)) {
        echo $opts->getUsageMessage();
        exit;
    }
    if (!isset($opts->overwrite)) {
        $opts->overwrite = false;
    } else {
        $opts->overwrite = true;
    }
    if (!isset($opts->port)) {
        $opts->port = 3306;
    }
    if (!isset($opts->tableclass)) {
        $opts->tableclass = 'Zend_Db_Table_Abstract';
    }
    if (!isset($opts->rowclass)) {
        $opts->rowclass = 'Zend_Db_Table_Row_Abstract';
    }
    if (!isset($opts->rowsetclass)) {
        $opts->rowsetclass = 'Zend_Db_Table_Rowset_Abstract';
    }
    if (!isset($opts->ignore)) {
        $opts->ignore = array();
    } else {
        $opts->ignore = explode(' ', $opts->ignore);
    }
    if (!isset($opts->limit)) {
        $opts->limit = '*';
    } else {
        $opts->limit = explode(' ', $opts->limit);
    }
    return $opts;
}
function get_db_adapter( stdClass $opts ) {
    $adapter = new Zend_Db_Adapter_Pdo_Mysql(array('host' => $opts->host, 'dbname' => $opts->database, 'port' => $opts->port, 'username' => $opts->username, 'password' => $opts->password, 'charset' => 'UTF8'));
    Zend_Db_Table::setDefaultAdapter($adapter);
    return $adapter;
}

function get_parser(stdClass $opts){
    $parser = new Db_Table_Parser();
    if (isset($opts->prefix)) {
        $parser->setPrefix($opts->prefix);
    }
    return $parser;
}



//----------------------------------------------------------------------------
//  init
//----------------------------------------------------------------------------
// Ensure library/ is on include_path
set_include_path(implode(PATH_SEPARATOR, array('/usr/local/bin/zend/library', get_include_path() )));
require_once 'Zend/Loader/Autoloader.php';
$autoloader = Zend_Loader_Autoloader::getInstance();
if (!isset($argv[1])) {
    die('usage: '.$argv[0].' dbname user password output_dir');
}




//------------------------------------------------------------------------------
//  main
//------------------------------------------------------------------------------

$opts = get_options( 'localhost', $argv[1], $argv[2], $argv[3], $argv[4]);
$adapter = get_db_adapter( $opts );
$parser = get_parser($opts);

$tables = $adapter->listTables();
printf('Found %d table(s)'."\n", count($tables));
foreach ($tables as $name) {
    CodeDumper::processTable($name, $opts, $parser);
}


